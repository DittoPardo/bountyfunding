First define a problem, be flexible with a solution. 
Problem is that as a open source developer I need money. I do not really want to beg for it, just do my work, so everyone can benefit. It's like paying upfront for software, so it can be release in open source.
As an open source user I need certain features. 

Open source funding. Alternative to paying after finishing work, users will pay upfront. Difference with previous systems is that many users can pay together. 

Benefits
Programmer gets paid upfront, before writing the code. Not really - actually money is reserved for them, but not paid until job is completed. But who should keep it - me? Can be a bit complicated from legal point of view.
Opposite to begging for money - can be a real job (it requires lots of funding though).

Workflow
Who sets up the task, developer or user?
I believe it should be users, because they know what they need the most. We have bounty systems, but they do not work well, maybe because developers set them (not sure)?.
Do not allow to gather more money than requested, otherwise developers go crazy. On the other hand who sets the max price? Maybe better 
Great thing is tha multiple people can donate to the same task.
Maybe users can create a task but developer must approve it (sth like client-secret). But in general I think both should be able to somehow do it.

Acceptance after finishing work. There are multiple requesters, so what about when some of them are not happy? Democratic vote (maybe 2/3). Acceptation only after feature in production. Maybe allow to pay parts for milestones?
Donors may not accept the solution but still get the benefits - some people may abuse this - needs conflict resolution system. 

How to manage the money? 
Micro payments, like flattr are easy to set up.
I need to control the money before work begins to guarantee payment.
PayPal will not accept this. Or maybe it will - see Pledgie, Flattr - check TOS.
How to donate? Maybe bitcoin - a bit too geeky but no trnsfer costs. Paypal will probably get pissed because it's a prepaid service. 

Analyze how Flattr works and copy. Then create proof of concept and start promoting. Then find partners, maybe even go to kickstarter.
Maybe speak with flattr. How to get their software - it does not seem to be opensource.

Micropayment platform. Shall we really go micro or more macro.
Paypal micropayments. 
Amazon Payments (used by Kickstarter). Allows to just lock funds without transferring them. Charged only if payment succesful. Maybe use kickstarter API and not build our own or something? Maybe it's better to allow user to create an account and tranfer money there (ala flattr). Then no problem locking the funds. 
Limit the amount of money that cen be stored on your accoun.
https://bitpay.com/
https://www.bitcoinpayflow.com/
https://stripe.com/

Transfer money after someone accepts the project to avoid storing large amounts? Maybe better just to charge deposit (or lock it) - but it needs to be free so it will work best with bitcoin.

How is this different from RentACoder? Because this will be RentACoder done right:) But seriously it will be about open source - code must be released under free license and returned to the community - so paying is a bit ike charity, but directed to solve your own (and others) problems. It will be distributed. It will allow multiple people to contribute to the bounty. It will be social;)

How is it different from KickStarter? 
Kickstarter is aiming at much bigger projects (looks like not really, there are small projects) but main audience seem to be bigger rojects). You must create a video advertising your project. Also entrepreneurs come up with ideas, not users. It's about features not entire projects.

What about core team? They may not accept the work to the trunk. But why shouldn't they, out of jealousy? We must also respect them and their donation systems. 

What if someone already implements a features / fixes a bug and does not claim the bounty? We can try to contact them or we can return the money. 
What about when team implements it? They need to split it themseves.

Maybe users can also donate randomly to bugfixes, which will be distributed between developers fixing them. Other categories include infrastructure, etc.

See also
http://www.linuxfund.org/

Open source crowdfunding platforms
http://spot.us - about press - publishing partners + contributors - https://github.com/spot-us/spot-us RUBY mature, not so much active, last commit 4 months ago
http://goteo.org - https://github.com/Goteo/Goteo PHP
http://catarse.me - https://github.com/danielweinmann/catarse RUBY mature, active
http://selfstarter.us/ - https://github.com/lockitron/selfstarter RUBY - nice, but maybe designed for one product per deployment? Only 2 months of development but active

Need to integrate donate / vote button in issue tracking systems. 
Projects that have their own foundation could configure this system on their own. Smaller project can use my service (and pay?). Everything would be open source still, so everyone can deploy - you just pay for processing. Little strange that bigger projects would not pay and smaller will pay, but well, they are encouraged to donate to create new features - self hosting - maybe this is a way to make money.

Flattr allows spending on inexistent projects. - users can reclaim later. How to allow this to increase adoption?
Flattr also allows extra donations - why not.

Who sets the total:
no total, but then users can overpay
developers, but then they will set some not needed projects
users, but which one?

We need 3 types of actors - developers, sponsors and project leaders. It's complicated, why do we need project leaders? - because code needs to be accepted to the trunk and they can help achieve it and manage the progress, they can focus tasks by putting a list on main project page, maybe they should also be able to receive percentage fee for a task - to maintain the code and to convince them that it makes sense to use our product?

Who registers tasks - is it project leaders? But others should also do it - but they can, when using issue tracking tools integrated with us. Also maybe users should be able to create tasks independently of main project stream on our page - I think it's a temporary solution, but makes it more obvious to project leaders to use our tool.

Maybe trunk is no longer important in the age of github? Noo, I believe it still is, users still use main project lines.

Integration with issue trackers.

Advanced feature - migrate from public installation to a private on (can be payable?)

Users can pay for good service (email box, other saas) that solves their problems. If in addition it's open-source - great. And I think when doing business in open-source niche, it needs to be.

Small potential market.

Allow users to sponsor with 0 dollars - equivalent to like button, just to encourage devs. Useful to allow users to gain some positive experience before asking them for money. Maybe project admins should be able to disable it. 

---------------------------------------

Implementation

Workflow
1. Developer sets up project account
2. Users support issues using widgets / web interface
3. Users can always retrieve funds back if no-one will develop the faeture (maybe automatic time limit).
4. Developer accepts a task
5. It would be useful to have a deadline, ala normal software development
6. Developer finishes
7. Sponsors vote to accept the changes

How much money I need to make to break-through
One million euros in 5 years;) - 2K euros after 6 moths, double every 6 months
For 1% fee I will need to have 200K worth of transactions in 6 moths - impossible
Can't go too high in fees because competition can close me since it's open-source
Flattr takes 10% - maybe can do the same?
Kicstarter takes 5%. 

MVP
Manifesto
Demo
Web-only interface


PROBLEMS 
users may not want to wait until someone else pays for a feature
they may also need them immediately
developers may not want to work for customers

LEAN

Customers vs users
Open source project developers, users that want to sponsor them or both? I think project developers are more like customers.

Customer segments
Open source software developers, open source software users.
Early adopters - developers present at FOSDEM 2013, languagetool, work closely with open source projects?

Problem
Users want specific features. They can't pay for them on their own (not sure?). They don't have easy way to tell developers what they want and sponsor the development. 
Open-source developers want to make some money. They shouldn't need to always rely on donations, they are doing a good job so why not get paid for it (it may lose it's appeal if you need to develop stuff for users, but you have a choice)?

Unique Value Proposition
Alternative business model for Open Source. In fact more logical one. Users pay upfront for features, that benefit everyone.
Fits well with what stallman proposed (really?)
In distant future allow developers make their living out of sytems like that
Open source itself
Bigger projects can deploy themselves (I can provide support), smaller projects can use my out-of=the-box service (maybe just for money processing?)


Existing Alternatives
donations (PayPal, Flattr)
kickstarter
rent-a-coder
nothing - deveopers will work for free anyway
bountyoss
appstorm.com.br


NEED TO REGISTER LIGHTING TALK UNTIL 21 DECEMBER, 15 MIN TALK

Todo before fosdem:
Lean canvas
Discuss with Milkowski, Jose, Viktor
Landing page
Roadmap (trello hipster?)
Slides


